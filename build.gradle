buildscript {
    repositories {
        maven {
            name = "central"
            url = "https://maven.thorfusion.com/artifactory/central/"
        }
    }
    dependencies {
        classpath("com.anatawa12.forge:ForgeGradle:2.3-1.0.+") {
            changing = true
        }
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.33.1"
    }
}


plugins {
    id 'org.ajoberstar.grgit' version '3.1.1'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'java'
    id 'idea'
    id 'maven-publish'
}

defaultTasks 'fullBuild'

idea {
    module {
        // For some reason this is necessary for IDEA 2014 workspaces to recognize assets
        inheritOutputDirs = true
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "com.jfrog.artifactory"
//apply plugin: 'net.minecraftforge.gradle'


repositories {
    maven {
        name = "central"
        url = "https://maven.thorfusion.com/artifactory/central/"
    }
}


if (System.getenv("BUILD_VER") == null){
    mod_version = mod_version
} else {
    mod_version = mod_version + "-" + System.getenv("BUILD_VER")
}
version = minecraft_version + "-" + mod_version
group = "mekanism"
archivesBaseName = "Mekanism-Community-Edition"
libsDirName = "../output"
distsDirName = "../output"
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

/*
minecraft {
    mappings channel: 'official', version: "1.12.2"
}
*/

minecraft {
    version = "${minecraft_version}-${forge_version}"
    mappings = "${mappings_version}"
    runDir = "run"
    useDepAts = true

    replace '${version}', mod_version
    replaceIn "Mekanism.java"
    replaceIn "MekanismGenerators.java"
    replaceIn "MekanismTools.java"
}

dependencies {
    compileOnly "org.jetbrains:annotations:${jb_annotations}"

    // compileOnly fg.deobf("MCMultiPart2:MCMultiPart:${mcmp_version}")
    deobfCompile "MCMultiPart2:MCMultiPart:${mcmp_version}"
    compileOnly "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
    // runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"
    compileOnly "net.darkhax.tesla:Tesla-${minecraft_version}:${tesla_version}"
    // compileOnly "inventory-tweaks:InventoryTweaks:${invtweak_version}:api"
    compileOnly "li.cil.oc:OpenComputers:MC${minecraft_version}-${opencomputers_version}:api"
    // Not updated yet
    compileOnly "mcp.mobius.waila:Hwyla:${hwyla_version}:api"
    // deobfCompile "cofh:RedstoneFlux:1.12-${redstoneflux_version}:universal"
    compileOnly "com.mod-buildcraft:buildcraft-api:${buildcraft_version}"
    compileOnly "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}:api"
    // runtime "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}"
    compileOnly "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
    compileOnly("CraftTweaker2:CraftTweaker2-API:${crafttweaker_version}") {
        exclude module: "asm-debug-all"
    }
    /*
    compileOnly fg.deobf("CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${crafttweaker_version}") {
        exclude module: "asm-debug-all"
    }
    */
    deobfCompile("CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${crafttweaker_version}") {
        exclude module: "asm-debug-all"
    }
    compileOnly "dan200.computercraft:ComputerCraft:${computercraft_version}:api"
    compileOnly "mcjty.theoneprobe:TheOneProbe-1.12:${top_version}:api"
    /*
    compileOnly("appeng:appliedenergistics2:${ae2_version}:api") {
        exclude module: "jei_1.12.2"
    }
    */
}

processResources {
    duplicatesStrategy = 'include'
    inputs.property "version", mod_version
    inputs.property "mc_version", minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": mod_version, "mc_version": minecraft_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude '**/*.blend*'
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

def setMainManifestProps = { Manifest manifest->
    manifest.attributes (
            'FMLAT': 'mekanism_at.cfg',
            'FMLCorePluginContainsFMLMod': 'true',
            'FMLCorePlugin': 'mekanism.coremod.MekanismCoremod'
    )
}

jar {
    manifest(setMainManifestProps)
}

task coreJar(type: Jar) {
    dependsOn 'reobfJar'
    classifier "Core"

    from('etc/core') {
        include '*.info'
        expand 'version':mod_version,'mc_version':minecraft_version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude 'mekanism/tools/**', 'mekanism/generators/**', 'assets/mekanismtools/**', 'assets/mekanismgenerators/**', 'mcmod.info'
    }

    manifest(setMainManifestProps)
}

task alltJar(type: Jar) {
    dependsOn 'reobfJar'
    classifier "ALL"

    from('etc/all') {
        include '*.info'
        expand 'version':mod_version,'mc_version':minecraft_version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude 'mcmod.info'
    }

    manifest(setMainManifestProps)
}

task toolsJar(type: Jar) {
    dependsOn 'reobfJar'
    classifier "Tools"

    from('etc/tools') {
        include '*.info'
        expand 'version':mod_version,'mc_version':minecraft_version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/tools/**', 'assets/mekanismtools/**'
    }
}

task generatorsJar(type: Jar) {
    dependsOn 'reobfJar'
    classifier "Generators"

    from('etc/generators') {
        include '*.info'
        expand 'version':mod_version,'mc_version':minecraft_version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/generators/**', 'assets/mekanismgenerators/**'
    }
}

task apiJar(type: Jar) {
    classifier "API"
    dependsOn "sourceMainJava"
    include 'mekanism/api/**'
    from sourceSets.main.java.srcDirs
    from sourceSets.main.output
}

artifacts {
    archives apiJar
    archives coreJar
    archives toolsJar
    archives generatorsJar
    archives alltJar
}

task fullBuild(type: Delete) {
    delete jar
    dependsOn "build"
}

artifactory {
    contextUrl = System.getenv("MAVEN_URL")
    publish {
        repository {
            repoKey = System.getenv("MAVEN_REPO")
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
        publishBuildInfo = false
        publishArtifacts = true
        publishPom = true
    }
    resolve {
        repository {
            repoKey = System.getenv("MAVEN_REPO")
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
            maven = true

        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archivesBaseName
            groupId = project.group
            version = project.version
            artifacts = [toolsJar, coreJar, generatorsJar, alltJar, apiJar]
            pom {
                name.set("Mekanism Community Edition")
                description.set('Mekanism is a Minecraft add-on featuring high-tech machinery that can be used to create powerful tools, armor, and weapons.')
                url.set('https://github.com/Thorfusion/Mekanism-Community-Edition')
                issueManagement {
                    system.set('github')
                    url.set('https://github.com/Thorfusion/Mekanism-Community-Edition/issues')
                }
                licenses {
                    license {
                        name.set('EUPL-1.2')
                        distribution.set('repo')
                    }
                }
            }
        }
    }
}